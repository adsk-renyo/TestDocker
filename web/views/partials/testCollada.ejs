<script>
    // load collada model
    var ColladaRender = function (canvasContainer, url, cbCaptureFirstImage) {
        var self = this;
        if (!Detector.webgl) Detector.addGetWebGLMessage();
        var container, stats;
        var camera, scene, renderer, objects;
        var particleLight;
        var dae;
        var canvasWidth = $(canvasContainer).width();
        var canvasHeight = $(canvasContainer).width();

        var ModelViewer = {
            supportsWebGL: function () {
                try {
                    return !!window.WebGLRenderingContext
                                && !!document.createElement('canvas').getContext('experimental-webgl');
                } catch (e) {
                    return false;
                }
            },

            init: function (container, canvasWidth, canvasHeight) {
                if (!this.supportsWebGL) {
                    return;
                }

                this.partLoaded = false;
                this.hasRendered = false;
                this.container = container;
                this.canvasWidth = canvasWidth;
                this.canvasHeight = canvasHeight;
                this.cbCaptureFirstImage = cbCaptureFirstImage;
                var bPreserve = (this.cbCaptureFirstImage ? true : false);
                this.renderer = new THREE.WebGLRenderer({
                    preserveDrawingBuffer: bPreserve
                });
                this.renderer.setClearColor(0xf0f0f0);
                this.camera = new THREE.PerspectiveCamera(45, this.canvasWidth / this.canvasHeight, 1, 2000);
                this.scene = new THREE.Scene();
                this.scale = 1;

                this.renderer.domElement.style.width = "100%";
                this.renderer.domElement.style.height = "75%";
                container.insertBefore(this.renderer.domElement, container.firstChild);

                this.buildControls();
                this.positionCamera();
                this.buildLights();
                //                this.enableStats();
                this.bindEvents();
                this.animate = _.bind(this.animate, this);
                this.animate();
            },

            // for screenshot
            takeScreenShot: function () {
                var canvasDom = this.renderer.domElement;
                var imgData = canvasDom.toDataURL();
                console.log(imgData);
                return imgData;
            },

            getLoader: function () {
                var daeLoader = new THREE.ColladaLoader();
                daeLoader.options.convertUpAxis = true;

                return daeLoader;
            },

            buildControls: function () {
                this.controls = new THREE.OrbitControls(
                            this.camera,
                            this.container
                        );

                this.controls.addEventListener('change', _.bind(this.render, this));
                this.controls.userPanSpeed = 0.15;
                this.controls.maxPolarAngle = Math.PI / 2;
            },

            bindEvents: function () {
                window.addEventListener(
                            'resize',
                            _.bind(this.onWindowResize, this),
                            false
                        );

                $('.scale').on('click', _.bind(function (e) {
                    var up = e.target.classList.contains('up'), model = this.model;
                    this.scale = Math.max(0.001, up ? this.scale + (this.scale * 0.75) : this.scale - (this.scale * 0.25));

                    if (model) {
                        model.scale.x = model.scale.y = model.scale.z = this.scale;
                    }
                }, this));

                $('.toggle-stats').on('click', _.bind(function () {
                    this.drawStats ? this.disableStats() : this.enableStats();
                }, this));

                $('.upload').on('change', _.bind(this.onModelUpload, this));

                var credits = $('.credits')
                          , controls = credits.find('.controls')
                          , help = credits.find('.help');

                $('.model-help').on('click', function () {
                    $([controls, help]).toggleClass('hidden');
                });
            },

            onWindowResize: function () {
                this.camera.aspect = this.canvasWidth / this.canvasHeight;
                this.camera.updateProjectionMatrix();

                this.renderer.setSize(this.canvasWidth, this.canvasHeight);
            },

            positionCamera: function (x, y, z) {
                this.camera.position.set(x || -5, y || 10, z || 15);
            },
            cameraLookAt: function (vector) {
                this.camera.lookAt(vector);
            },
            cameraNearFar: function (near, far) {
                this.camera.near = near;
                this.camera.far = far;
                this.camera.updateProjectionMatrix();
            },

            buildGrid: function (gridSize, gridStep, center, gridColor) {
                var size = gridSize || 14
                          , step = gridStep || 1
                          , center = center || (new THREE.Vector3())
                          , geometry = new THREE.Geometry()
                          , material = new THREE.LineBasicMaterial({
                              color: gridColor || 0x303030
                          });

                if (this.grid) {
                    this.scene.remove(this.grid);
                }

                for (var i = -size; i <= size; i += step) {
                    geometry.vertices.push(new THREE.Vector3(center.x - size, center.y - 0.04, center.z + i));
                    geometry.vertices.push(new THREE.Vector3(center.x + size, center.y - 0.04, center.z + i));

                    geometry.vertices.push(new THREE.Vector3(center.x + i, center.y - 0.04, center.z - size));
                    geometry.vertices.push(new THREE.Vector3(center.x + i, center.y - 0.04, center.z + size));
                }

                this.grid = new THREE.Line(geometry, material, THREE.LinePieces);
                this.scene.add(this.grid);

                return this.grid;
            },

            buildLights: function () {

                // Hemisphere light
                var hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.6);
                hemiLight.color.setHSL(0.0, 0.0, 0.6);
                hemiLight.groundColor.setHSL(0.095, 0.3333333333333333, 0.375);
                hemiLight.position.set(0, 500, 0);
                this.scene.add(hemiLight);

                this.hemiLight = hemiLight;

                // Directional light
                var dirLight = new THREE.DirectionalLight(0xffffff, 1), d = 300;
                dirLight.position.set(-1, 0.75, 1);
                dirLight.position.multiplyScalar(50);
                dirLight.castShadow = true;
                dirLight.shadowMapWidth = dirLight.shadowMapHeight = 1024 * 2;

                dirLight.shadowCameraLeft = -d;
                dirLight.shadowCameraRight = d;
                dirLight.shadowCameraTop = d;
                dirLight.shadowCameraBottom = -d;

                dirLight.shadowCameraFar = 3500;
                dirLight.shadowBias = -0.0001;
                dirLight.shadowDarkness = 0.35;

                this.scene.add(dirLight);

                this.dirLight = dirLight;

                var ambientLight = new THREE.AmbientLight(0x404040); // soft white light
                this.scene.add(ambientLight);
            },

            enableStats: function () {
                this.drawStats = true;
                if (this.stats) {
                    this.stats.domElement.style.display = 'block';
                    return;
                }

                var stats = this.stats = new THREE.Stats();
                stats.domElement.style.position = 'absolute';
                stats.domElement.style.top = '0px';
                stats.domElement.style.right = '0px';
                this.container.appendChild(stats.domElement);
            },

            disableStats: function () {
                this.drawStats = false;
                if (this.stats) {
                    this.stats.domElement.style.display = 'none';
                }
            },

            parseColladaXml: function (xml, callback, assetsUrl) {
                this.getLoader().parse(xml, callback, assetsUrl);
            },

            parseColladaDoc: function (doc, callback) {
                var loader = this.getLoader();
                loader.parse(doc, callback);
            },

            addModel: function (model) {
                if (this.model) {
                    this.scene.remove(this.model);
                }

                model.scale.x = model.scale.y = model.scale.z = this.scale || 1;
                model.updateMatrix();
                this.scene.add(model);

                this.model = model;
            },

            animate: function () {
                requestAnimationFrame(this.animate);
                this.render();
                this.controls.update();

                if (this.drawStats) {
                    this.stats.update();
                }
            },

            render: function () {
                var newW = this.renderer.domElement.clientWidth;
                if (newW > 0 && newW != this.canvasWidth) {
                    this.canvasWidth = newW;
                    this.canvasHeight = newW * 0.75;
                    this.renderer.domElement.style.width = canvasWidth;
                    this.renderer.domElement.style.height = canvasHeight;
                    this.onWindowResize();
                    return;
                }
                this.renderer.render(
                            this.scene,
                            this.camera
                        );
                this.hasRendered = true;
                if (this.partLoaded && this.cbCaptureFirstImage) {
                    this.cbCaptureFirstImage();
                    this.cbCaptureFirstImage = null;
                }
            },

            onModelUpload: function (e) {
                var files = e.target.files;
                if (files.length !== 1) {
                    return;
                }

                modelLoader.getLocalZip(e.target.files[0]);
            }

        };

        var ModelDownloader = function (options) {
            this.init(options || {});
        };

        _.extend(ModelDownloader.prototype, {

            init: function (options) {
                this.onProgress = options.onProgress;
                this.onSuccess = options.onSuccess;
                this.onError = options.onError;
                this.onReadStart = options.onReadStart;

                this.textures = [];
                this.texturesLoaded = 0;
            },

            get: function (url) {
                if (_.contains(url, '.zip')) {
                    return this.getZip(url);
                }

                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, true);
                xhr.onprogress = _.bind(function (e) {
                    if (!e.lengthComputable) {
                        return;
                    }

                    this.onProgress(e.loaded, e.total);
                }, this);
                xhr.onreadystatechange = _.bind(function () {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        return this.onSuccess(xhr.responseText);
                    } else if (xhr.readyState === 4) {
                        return this.onError(xhr.status);
                    }
                }, this);
                xhr.send();
            },

            getLocalZip: function (file) {
                this.reader = zip.createReader(
                                new zip.BlobReader(file),
                                _.bind(this.onDownloadFinished, this),
                                this.onError
                            );
            },

            getZip: function (url) {
                this.reader = zip.createReader(
                                new zip.HttpReader(url),
                                _.bind(this.onDownloadFinished, this),
                                this.onError
                            );
            },

            onDownloadFinished: function (zip) {
                zip.getEntries(_.bind(this.onEntriesRead, this));
            },

            onEntriesRead: function (entries) {
                this.zipEntries = entries;

                for (var key in entries) {
                    if (entries[key].filename.match(/\.dae$/)) {
                        return this.readModelEntry(entries[key]);
                    }
                }

                alert('No DAE file found in ZIP');
            },

            findZipEntry: function (filename) {
                for (var key in this.zipEntries) {
                    if (this.zipEntries[key].filename === filename) {
                        return this.zipEntries[key];
                    }
                }

                return false;
            },

            readModelEntry: function (entry) {
                if (this.onReadStart) {
                    this.onReadStart();
                }

                entry.getData(
                                new zip.TextWriter(),
                                _.bind(this.onModelXmlRead, this),
                                this.onProgress ? _.throttle(this.onProgress, 75) : null
                            );
            },

            onModelXmlRead: function (xml) {
                var xmlParser = new DOMParser();
                this.modelDoc = xmlParser.parseFromString(xml, 'application/xml');
                this.queryForTextures(this.modelDoc);
            },

            queryForTextures: function (doc) {
                var q = '//dae:library_images/dae:image';
                var elements = doc.evaluate(q, doc, this.resolveNS, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
                var element = elements.iterateNext(), i, child, entry;
                var textures = [];

                while (element) {
                    for (i = 0; i < element.childNodes.length; i++) {
                        child = element.childNodes[i];
                        if (child.nodeName === 'init_from') {
                            entry = this.findZipEntry(child.textContent);
                            if (entry) {
                                textures.push({ zipEntry: entry, docNode: child });
                            }
                        }
                    }

                    element = elements.iterateNext();
                }

                this.textures = textures;
                this.texturesLoaded = 0;
                this.loadTextures();
            },

            resolveNS: function (nsPrefix) {
                if (nsPrefix === 'dae') {
                    return 'http://www.collada.org/2005/11/COLLADASchema';
                }

                return null;
            },

            resolveMime: function (filename) {
                switch (filename.replace(/.*\.(.*)/, '$1')) {
                    case 'png':
                        return 'image/png';
                    case 'bmp':
                        return 'image/bmp';
                    case 'gif':
                        return 'image/gif';
                    case 'jpg':
                    case 'jpeg':
                    default:
                        return 'image/jpeg';
                }
            },

            loadTextures: function () {
                if (this.textures.length === 0) {
                    return this.onSuccess(this.modelDoc);
                }

                _.map(this.textures, _.bind(this.loadTexture, this));
            },

            loadTexture: function (texture) {
                texture.zipEntry.getData(
                                new zip.Data64URIWriter(this.resolveMime(texture.zipEntry.filename)),
                                _.bind(this.onTextureLoaded, this, texture)
                            );
            },

            onTextureLoaded: function (texture, data) {
                texture.docNode.textContent = data;

                if (++this.texturesLoaded === this.textures.length) {
                    return this.onSuccess(this.modelDoc);
                }
            }

        });


        var modelLoader = new ModelDownloader({
            onProgress: function (current, total) {
            },

            onError: function (e) {
                console.log(e);
            },

            onReadStart: function () {
            },

            onSuccess: function (modelDoc, b) {
                ModelViewer.parseColladaDoc(modelDoc, function (model) {
                    var modelScene = model.scene;
                    ModelViewer.addModel(modelScene);
                    var modelBBox = null;
                    if (modelScene instanceof THREE.Group) {
                        for (var i = 0, num = modelScene.children.length; i < num; ++i) {
                            var obj3d = modelScene.children[i];
                            var helper = new THREE.BoundingBoxHelper(obj3d, 0xff0000);
                            helper.update();
                            if (!modelBBox) {
                                modelBBox = helper.box;
                            } else {
                                modelBBox.min.min(helper.box.min);
                                modelBBox.max.max(helper.box.max);
                            }
                        }
                    }
                    if (!modelBBox) {
                        ModelViewer.positionCamera(-7.012865984806965, 4.904537173175244, -7.452066400217873);
                    } else {
                        var lowCenter = modelBBox.min.clone().lerp(modelBBox.max, 0.5);
                        lowCenter.y = modelBBox.min.y;
                        var vec = new THREE.Vector3();
                        vec.subVectors(modelBBox.max, modelBBox.min);
                        var vecLen = vec.length();
                        var camera_forward = new THREE.Vector3(-0.612375, -0.612375, -0.50000);
                        var cameraOffset = -1.3 * vecLen;
                        var cameraPos = new THREE.Vector3(lowCenter.x + camera_forward.x * cameraOffset,
                            lowCenter.y + camera_forward.y * cameraOffset,
                            lowCenter.y + camera_forward.y * cameraOffset
                        );

                        ModelViewer.positionCamera(cameraPos.x, cameraPos.y, cameraPos.z);
                        ModelViewer.cameraLookAt(camera_forward);
                        ModelViewer.cameraNearFar(vecLen / 5, vecLen * 3);
                        //ModelViewer.buildGrid(vecLen / 2, vecLen / 14.1, lowCenter);
                        ModelViewer.partLoaded = true;
                        ModelViewer.hemiLight.position.set(0, vecLen * 2, 0);
                        ModelViewer.dirLight.position.set(vecLen, vecLen * 2, vecLen);
                    }


                }, 'models/');
            }

        });

        zip.workerScriptsPath = "/assets/js/zip/";
        ModelViewer.init(canvasContainer, canvasWidth, canvasHeight);
        if (typeof url === 'string')
            modelLoader.get(url);
        else //url is local file from file reader
            modelLoader.getLocalZip(url);
        return ModelViewer;
    };
</script>